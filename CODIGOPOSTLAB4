//Jos√© Luis Monterroso Ramos
//20142
//Post-Laboratorio 4


#include <Arduino.h>
#include <driver/ledc.h>
#include <ESP32Servo.h>

// DEFINICION DE PINES
#define LEDR 21
#define LEDB 18
#define LEDV 19
#define BOTON1 13
#define BOTON2 22
#define SERVO_PIN 23

// DEFINICION DE CANALES
#define pwmChannelR 0
#define pwmChannelB 1
#define pwmChannelV 2
#define pwmChannelS 3

// DEFINICION DE SENALES PWM
#define freqPWM 50  // Reducido para el servo SG90

// DEFINICION DE RESOLUCION
#define resolution 8

int minduty = 25;
int midduty = 75;
int maxduty = 125;
int estado = 0;
int leds = 0;
int brillo = 0;

Servo myservo;  // Create a Servo object

int previousLED = -1; // Keep track of the previous LED selection
int servoPosition = 0; // Keep track of the servo position

void setup()
{
  Serial.begin(9600); // Initialize serial communication
  pwmSetup();
  pinMode(BOTON2, INPUT_PULLUP);
  pinMode(BOTON1, INPUT_PULLUP);

  // Attach the servo to the pin
  myservo.attach(SERVO_PIN);
  myservo.write(0);  // Set initial position of the servo
}

void loop()
{
  seleccionarLED();
  controlBrillo();
  controlServo(); // Move the servo based on LED selection
}

void pwmSetup()
{
  ledcSetup(pwmChannelR, freqPWM, resolution);
  ledcSetup(pwmChannelB, freqPWM, resolution);
  ledcSetup(pwmChannelV, freqPWM, resolution);
  ledcSetup(pwmChannelS, freqPWM, resolution);

  ledcAttachPin(LEDR, pwmChannelR);
  ledcAttachPin(LEDB, pwmChannelB);
  ledcAttachPin(LEDV, pwmChannelV);
  ledcAttachPin(SERVO_PIN, pwmChannelS);
}

void configurarLED(int pwmChannel, int brillo)
{
  ledcWrite(pwmChannel, brillo);
}

void seleccionarLED()
{
  if (digitalRead(BOTON2) == LOW)
  {
    leds = (leds + 1) % 3;
    if (leds != previousLED) {
      controlServo(); // Move the servo based on LED color selection
      previousLED = leds; // Update the previous LED selection
    }
    delay(500);
  }
}

void controlBrillo()
{
  if (digitalRead(BOTON1) == LOW)
  {
    brillo += 32;
    if (brillo > 255)
    {
      brillo = 0;
    }
    delay(500);
  }

  switch (leds)
  {
    case 0:
      configurarLED(pwmChannelR, brillo);
      configurarLED(pwmChannelB, 0);
      configurarLED(pwmChannelV, 0);
      ledcWrite(pwmChannelS, minduty);
      break;
    case 1:
      configurarLED(pwmChannelR, 0);
      configurarLED(pwmChannelB, brillo);
      configurarLED(pwmChannelV, 0);
      ledcWrite(pwmChannelS, midduty);
      break;
    case 2:
      configurarLED(pwmChannelR, 0);
      configurarLED(pwmChannelB, 0);
      configurarLED(pwmChannelV, brillo);
      ledcWrite(pwmChannelS, maxduty);
      break;
  }
}

void controlServo()
{
  switch (leds)
  {
    case 0:
      servoPosition = 0;
      break;
    case 1:
      servoPosition = 90;
      break;
    case 2:
      servoPosition = 180;
      break;
  }
  myservo.write(servoPosition);
}
